{
    "cjs-singleton": {
    "prefix": ["cjs-singleton"],
    "body":["//lodash utility","const {merge,assign}=require('lodash')\n\n\n",
   "/*",
   "* default options",
   "*",
   "*/",
    "const _defaultOptions = {}\n\n",
    "function ${2:myfunction}(opts = {}) {\n",
"\tthis.options = merge(assign({}, _defaultOptions), opts)","}\n\n",
"${2:myfunction}.prototype.init = function(){",
"\t// init code here",
"}\n\n\n",
"let ${2:myfunction}\n",
"modeul.exports=(opts={})=>{\n",
"\tif(${2:myfunction}===undefined){\n",
"\t${2:myfunction} = new ${2:myfunction}(opts)",
"\n",
"}",
"\t return ${2:myfunction}",
"}"
],
    "description": "A singleton pattern with commonjs"
  },
      "cjs-factory": {
    "prefix": ["cjs-factory"],
    "body":["function ${2:myFactory}(opts = {}){",
    "\tthis.options = opts","}",
    "modules.exports.create${2:myFactory} = ${2:myFactory}"
],
    "description": "A factory pattern with commonjs"
  },

      "cjs-proxy": {
    "prefix": ["cjs-proxy"],
    "body":["const proto = Object.getPrototypeOf(${2:myOriginalObj});",
    "\n","function ${3:myObject}(${2:myOriginalObj}) {",
    "\t${3:myObject}.prototype = Object.create(proto)",
    "}",
    "${3:myObject}.prototype.override = function () {",
    "\tthis.${4:_originObj}.override()","}",
    "\n",
    "modules.exports.create = function (${4:obj}) {",
    "\treturn myObject(${3:myObject})",
    "}"

],
    "description": "A proxy pattern with commonjs"
  },

     "cjs-decorator": {
    "prefix": ["cjs-decorator"],
    "body":["function decorate(${2:component}) {",
    "\tconst proto = Object.getPrototypeOf(${2:component});",
    "\tfunction Decorator(${2:component}) {",
    "\t\tthis.${2:component} = ${2:component}",
    "}",
    "\tDecorator.prototype = Object.create(proto);",
    "\t//new method",
    "\tDecorator.prototype.meth1 = function () {}",
    "\t//delegated method",
    "\tDecorator.prototype.meth2 = function () {",
    "\t\tthis.${2:component}.meth.apply(this.${2:component}, arguments);",
    "\t}",
    "\treturn new Decorator(${2:component});",
    "}",
    "\n",
    "modules.exports.decorate = decorate"
],
    "description": "A decorator pattern with commonjs"
  },

      "cjs-strategy": {
    "prefix": ["cjs-strategy"],
    "body":["function ${2:component}() {","\n","}",
    "${2:component}.prototype.setStrategy = function (strategy) {",
    "\tthis.strategy = strategy","}","\n",
    "${2:component}.prototype.setStrategy = function (strategy) {","}",
    "${2:component}.prototype.meth = function () {",
    "\tthis.strategy.meth()","}",
    "modules.exports.${2:component} = ${2:component}",
    "modules.exports.${2:component} = ${2:component}"
],
    "description": "A strategy pattern with commonjs"
  },
   "es6-singleton": {
    "prefix": ["es6-singleton"],
    "body":["/**","*","* Singleton class","*","*/","class ${2:mySingleton} {",
    "\tconstructor(opts = {}) {","\t\tthis.options = opts","\t\tthis._init()","\t}",
    "\t/**","\t*","\t*","\t*/","\t_init() {}","\n","}","\n","let instance","\n",
    "if (!instance) {", "\tinstance = new ${2:mySingleton}()", "}","\n",
    "export default instance"
],
    "description": "A singleton pattern with es6"
  },
   "es6-factory": {
    "prefix": ["es6-factory"],
    "body":["function ${2:myFactory}(opts = {}){",
    "\tthis.options = opts","}",
    "export default create${2:myFactory}"
],
    "description": "A factory pattern with es6"
  },
}